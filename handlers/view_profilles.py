import random

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from utils.states import View_profiles

from keyboards.reply import view_profiles_kb, start_kb
from keyboards.builder import metch_unmetch_kd

from data.db import get_user_data, get_users_id_list

next_profile_query_list = ["view_next_profile", "profile_like", "profile_dislike"]

router = Router()

#—Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–æ—â—è–µ—Ç —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
def print_profile(user_data : dict) -> str:
    formated_text = []
    [formated_text.append(f"{key}: {value}") for key, value in user_data.items() if key != "photo"]
    return "\n".join(formated_text)



@router.message(F.text == "üîç—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def view_profiles(message : Message, state: FSMContext):
    await state.set_state(View_profiles.view)
    #—Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
    unviewed_list = get_users_id_list(without = message.from_user.id)

    #–≤—ã–±–∏—Ä–∞–µ–º –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã–π ID –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã 
    selected_user_id = random.choice(unviewed_list)
    #—É–¥–æ–ª—è–µ–º —ç—Ç–æ—Ç ID –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω
    unviewed_list.remove(selected_user_id)
    #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–µ–∑ —ç—Ç–æ–≥–æ ID –≤ state.data["unviewed_list"]
    await state.update_data(unviewed = unviewed_list)

    #–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID 
    selected_user_data = get_user_data(selected_user_id)

    #–æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∞–Ω–∫–µ—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer_photo(photo= selected_user_data.pop("photo"), caption= print_profile(selected_user_data), reply_markup=view_profiles_kb)  
    #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω—ã–π ID –≤ state.data["state.data["selectad_user"]"]
    await state.update_data(selected_user_id = selected_user_id)
    
    
    
@router.message(View_profiles.view)
async def view_profiles_text(message: Message, state: FSMContext, bot: Bot):
    if message.text == "üëç":

        state_data = await state.get_data()

        from_user_data = get_user_data(message.from_user.id)

        await bot.send_photo(chat_id = state_data["selected_user_id"], photo=from_user_data["photo"], caption= print_profile(from_user_data), reply_markup=metch_unmetch_kd(message.from_user.id))
        await bot.send_message(chat_id = state_data["selected_user_id"], text= "‚¨Ü–∫–æ–º—É —Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞‚¨Ü")

        try:
            unviewed_list = state_data['unviewed']

            selected_user_id = random.choice(unviewed_list)

            unviewed_list.remove(selected_user_id)

            user_data = get_user_data(selected_user_id)

            await message.answer_photo(photo= user_data.pop("photo"), caption= print_profile(user_data))
            await state.update_data(selected_user_id = selected_user_id)

        except IndexError:
            await message.answer('—ç—Ç–æ –±—ã–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã', reply_markup= start_kb)
            await state.clear()


    elif message.text == "üëé":
        try:
            state_data = await state.get_data()
            
            unviewed_list = state_data['unviewed']

            selected_user_id = random.choice(unviewed_list)

            unviewed_list.remove(selected_user_id)

            user_data = get_user_data(selected_user_id)

            await message.answer_photo(photo= user_data.pop("photo"), caption= print_profile(user_data))
            await state.update_data(selected_user_id = selected_user_id)
        except IndexError:
            await message.answer('—ç—Ç–æ –±—ã–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã', reply_markup= start_kb)
            await state.clear()     


    elif message.text == "‚ùå":
        await state.clear()
        await message.answer(text = "–≤—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç", reply_markup= start_kb)

    else:
        await message.answer(text = "–≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '‚ùå' –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –±–æ—Ç–∞")
    


@router.callback_query(View_profiles.view)
async def view_profiles_callback(query: CallbackQuery, state: FSMContext):
    await query.message.answer(text = "–≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '‚ùå' –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –±–æ—Ç–∞")
    await query.answer(text="–Ω–∏—á—ë —Ç—É—Ç –Ω–µ –Ω–∞–∂–∏–º–∞–π"),

